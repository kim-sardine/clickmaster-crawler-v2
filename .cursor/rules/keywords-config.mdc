
# 키워드 설정 및 프롬프트 관리

## 🚧 현재 구현 상태

### ✅ 구현완료
- `src/config/settings.py`에 기본 키워드 설정
- 환경변수를 통한 설정 관리
- 키워드별 최대 기사 수 제한
- `src/core/prompt_generator.py`에 프롬프트 템플릿 구현
- JSON Schema를 통한 응답 형식 구조화

### ❌ 미구현 부분
- 확장 키워드 관리 시스템
- 프롬프트 버전 관리
- A/B 테스트 시스템

## 🔍 검색 키워드 설정

### 기본 키워드 목록 ✅ 구현완료
```python
# src/config/settings.py에서 구현됨
DEFAULT_KEYWORDS = [
    "논란",
    "충격",
    "경악",
    "발칵",
    "이슈",
    "화들짝",
    "화제",
    "네티즌들은",
    "온라인 커뮤니티",
]
MAX_ARTICLES_PER_KEYWORD = 100
CRAWL_DELAY_SECONDS = 0.5
```

**현재 사용법:**
```bash
# 기본 키워드 사용
python scripts/crawl_news.py --date 2024-01-15

# 커스텀 키워드 사용
python scripts/crawl_news.py --date 2024-01-15 --keywords 충격 반전 --max-per-keyword 50
```

## 📝 프롬프트 템플릿 ✅ 구현완료

### 기본 Clickbait 판별 프롬프트
```python
# src/core/prompt_generator.py에 구현됨
class PromptGenerator:
    """OpenAI API 프롬프트 생성기"""
    
    def generate_clickbait_prompt(self, title: str, content: str) -> str:
        """
        Clickbait 판별을 위한 프롬프트 생성
        """
        prompt = f"""
당신은 뉴스의 제목과 내용을 분석하여 클릭베이트 여부를 판단하는 전문가입니다.
주어진 뉴스 제목과 본문 내용을 분석하여 해당 기사의 제목이 클릭베이트인지 여부를 판단하고, 그 정도를 0에서 100 사이의 정수로 평가해주세요.

다음 단계를 따라 분석을 진행해주세요:

1. 뉴스 제목 분석:
   - 제목에 사용된 단어와 표현을 면밀히 분석하세요.
   - 제목에 모호하거나 오해의 소지가 있는 표현이 있는지 살펴보세요.
   - 제목이 독자의 감정을 과도하게 자극하는지 검토하세요.
   - 제목에 과장되거나 왜곡된 표현이 있는지 확인하세요.
   - "충격", "경악", "발칵" 등 감정적 반응을 유도하는 과장된 표현이 있는지 확인하세요.
   - "이것", "저것", "그것" 등 모호한 대명사를 사용해 호기심을 유발하는지 확인하세요.

2. 본문 내용 분석:
   - 제공된 본문 내용을 주의 깊게 읽으세요.
   - 핵심 정보와 주요 메시지를 파악하세요.
   - 본문 내용은 최대 700자까지만 제공됩니다.

3. 클릭베이트 의도 분석:
   - 제목과 본문 내용 사이에 의도적인 불일치가 있는지 확인하세요.
   - 제목이 내용을 과장하거나 왜곡하여 독자를 오도하고 있는지 살펴보세요.
   - 제목이 클릭을 유도하기 위해 의도적으로 본문의 정보를 왜곡하거나 숨기고 있는지 판단하세요.
   - 제목이 기사의 실제 본문 내용보다 더 자극적이거나 중요한 것처럼 보이게 하는지 분석하세요.
   - 기사의 소재 자체가 자극적인 경우 클릭베이트로 오인될 수 있습니다. 이때는 제목과 내용의 일치 여부를 주의깊게 확인하세요.

4. 클릭베이트 정도 평가:
   - 앞선 분석을 바탕으로 기사 제목의 클릭베이트 정도를 0-100 사이의 정수로 평가하세요.
   - 평가 기준:
     * 0-20: 전혀 클릭베이트 의도가 없음. 제목이 본문 내용을 정확하게 반영함.
     * 21-40: 약간의 클릭베이트 의도가 있음. 제목이 본문 내용을 약간 과장함.
     * 41-60: 중간 정도의 클릭베이트 의도가 있음. 제목이 본문 내용을 상당히 과장함.
     * 61-80: 강한 클릭베이트 의도가 있음. 제목이 본문 내용을 크게 왜곡함.
     * 81-100: 매우 강한 클릭베이트 의도가 있음. 제목이 본문 내용과 거의 무관하거나 완전히 왜곡함.
   - 평가 이유를 구체적으로 설명하세요.

5. 최종 검토:
   - 평가가 객관적이고 공정한지 다시 한 번 확인하세요.
   - 본문 내용은 일부만 제공되었다는 한계를 고려하여 평가에 반영했는지 확인하세요.
   - 제목의 낚시성 정도를 정확하게 반영하는 점수를 부여했는지 확인하세요.

위의 단계를 따라 분석하고 평가한 후, 다음 형식으로 최종 답변을 제시해주세요:

score : [클릭베이트 정도. 0-100 사이의 정수]
reason : [2~3줄의 간단한 설명. 한국어로 작성. 존댓말 사용.]

대표적인 클릭베이트 기사 제목의 예시는 다음과 같습니다:
- 영화, 드라마 등 작품 속 캐릭터의 상황을 배우의 실제 상황으로 오인하게 하는 제목
- 대상을 직접 언급하지 않고 간접적인 방식으로 언급해 독자의 궁금증을 불러일으키는 제목
- 앞말/중간말/뒷말을 잘라내서 다른 의미로 받아들일 여지로 만드는 제목
- "충격", "경악", "발칵" 등 감정적 반응을 유도하는 과장된 표현을 사용하는 제목
- "이것", "저것", "그것" 등 모호한 대명사를 사용해 호기심을 유발하는 제목

**뉴스 제목:** {title}

**뉴스 내용:** {content[:700]}{"..." if len(content) > 700 else ""}
"""
        return prompt
```

### JSON Schema 응답 형식 ✅ 구현완료
```python
# src/core/prompt_generator.py에 정의됨
CLICKBAIT_EVALUATION_SCHEMA = {
    "type": "object",
    "properties": {
        "score": {
            "type": "integer",
            "description": "0에서 100 사이의 클릭베이트 점수",
            "minimum": 0,
            "maximum": 100,
        },
        "reason": {
            "type": "string",
            "description": "클릭베이트 판단 근거",
        },
    },
    "required": ["score", "reason"],
    "additionalProperties": False,
}
```

### 프롬프트 사용 특징
- System Role로 전문가 역할 설정
- User Role로 상세 분석 요청
- JSON Schema를 통한 구조화된 응답 보장
- 내용 길이 700자 제한 및 자동 truncate
- 배치 API에 최적화된 형식
