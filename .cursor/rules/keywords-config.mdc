---
globs: "src/config/*"
description: "키워드 설정 및 프롬프트 관리 가이드"
---

# 키워드 설정 및 프롬프트 관리

## 🔍 검색 키워드 설정

### 기본 키워드 목록
```python
SEARCH_KEYWORDS = [
    "충격",      # 충격적인 사건, 뉴스
    "공포",      # 공포감을 조성하는 내용
    "반전",      # 예상치 못한 전개
]
```

### 키워드 확장 전략
```python
EXTENDED_KEYWORDS = {
    "충격": ["충격적인", "충격발", "충격적 사실", "충격 실화"],
    "공포": ["공포의", "무서운", "소름끼치는", "경악"],
    "반전": ["반전드라마", "반전 결말", "뒤바뀐", "역전"]
}
```

### 언론사별 특화 키워드
```python
PUBLISHER_KEYWORDS = {
    "스포츠": ["이변", "파격", "사상초유", "전무후무"],
    "연예": ["폭로", "고백", "스캔들", "화제"],
    "정치": ["파문", "논란", "갈등", "대립"]
}
```

## 📝 프롬프트 템플릿

### 기본 Clickbait 판별 프롬프트
```python
CLICKBAIT_PROMPT = """
당신은 뉴스의 제목과 내용을 분석하여 클릭베이트 여부를 판단하는 전문가입니다.
주어진 뉴스 제목과 본문 내용을 분석하여 해당 기사의 제목이 클릭베이트인지 여부를 판단하고, 그 정도를 0에서 100 사이의 정수로 평가해주세요.

다음 단계를 따라 분석을 진행해주세요:

1. 뉴스 제목 분석:
   - 제목에 사용된 단어와 표현을 면밀히 분석하세요.
   - 제목에 모호하거나 오해의 소지가 있는 표현이 있는지 살펴보세요.
   - 제목이 독자의 감정을 과도하게 자극하는지 검토하세요.
   - 제목에 과장되거나 왜곡된 표현이 있는지 확인하세요.
   - "충격", "경악", "발칵" 등 감정적 반응을 유도하는 과장된 표현이 있는지 확인하세요.
   - "이것", "저것", "그것" 등 모호한 대명사를 사용해 호기심을 유발하는지 확인하세요.

2. 본문 내용 분석:
   - 제공된 본문 내용을 주의 깊게 읽으세요.
   - 핵심 정보와 주요 메시지를 파악하세요.
   - 본문 내용은 최대 700자까지만 제공됩니다.

3. 클릭베이트 의도 분석:
   - 제목과 본문 내용 사이에 의도적인 불일치가 있는지 확인하세요.
   - 제목이 내용을 과장하거나 왜곡하여 독자를 오도하고 있는지 살펴보세요.
   - 제목이 클릭을 유도하기 위해 의도적으로 본문의 정보를 왜곡하거나 숨기고 있는지 판단하세요.
   - 제목이 기사의 실제 본문 내용보다 더 자극적이거나 중요한 것처럼 보이게 하는지 분석하세요.
   - 기사의 소재 자체가 자극적인 경우 클릭베이트로 오인될 수 있습니다. 이때는 제목과 내용의 일치 여부를 주의깊게 확인하세요.

4. 클릭베이트 정도 평가:
   - 앞선 분석을 바탕으로 기사 제목의 클릭베이트 정도를 0-100 사이의 정수로 평가하세요.
   - 평가 기준:
     * 0-20: 전혀 클릭베이트 의도가 없음. 제목이 본문 내용을 정확하게 반영함.
     * 21-40: 약간의 클릭베이트 의도가 있음. 제목이 본문 내용을 약간 과장함.
     * 41-60: 중간 정도의 클릭베이트 의도가 있음. 제목이 본문 내용을 상당히 과장함.
     * 61-80: 강한 클릭베이트 의도가 있음. 제목이 본문 내용을 크게 왜곡함.
     * 81-100: 매우 강한 클릭베이트 의도가 있음. 제목이 본문 내용과 거의 무관하거나 완전히 왜곡함.
   - 평가 이유를 구체적으로 설명하세요.

5. 최종 검토:
   - 평가가 객관적이고 공정한지 다시 한 번 확인하세요.
   - 본문 내용은 일부만 제공되었다는 한계를 고려하여 평가에 반영했는지 확인하세요.
   - 제목의 낚시성 정도를 정확하게 반영하는 점수를 부여했는지 확인하세요.

위의 단계를 따라 분석하고 평가한 후, 다음 형식으로 최종 답변을 제시해주세요:

score : [클릭베이트 정도. 0-100 사이의 정수]
reason : [2~3줄의 간단한 설명. 한국어로 작성. 존댓말 사용.]

대표적인 클릭베이트 기사 제목의 예시는 다음과 같습니다:
- 영화, 드라마 등 작품 속 캐릭터의 상황을 배우의 실제 상황으로 오인하게 하는 제목
- 대상을 직접 언급하지 않고 간접적인 방식으로 언급해 독자의 궁금증을 불러일으키는 제목
- 앞말/중간말/뒷말을 잘라내서 다른 의미로 받아들일 여지로 만드는 제목
- "충격", "경악", "발칵" 등 감정적 반응을 유도하는 과장된 표현을 사용하는 제목
- "이것", "저것", "그것" 등 모호한 대명사를 사용해 호기심을 유발하는 제목

제목: {title}
내용: {content}
"""
```

### 언론사별 특화 프롬프트
```python
PUBLISHER_SPECIFIC_PROMPTS = {
    "스포츠": """
스포츠 뉴스의 낚시성을 평가합니다.
특히 다음 요소를 중점적으로 검토하세요:
- 경기 결과 스포일러 방지를 위한 과도한 암시
- 선수 개인사생활 관련 선정적 표현
- 팀 간 갈등 조장 표현
""",
    "연예": """
연예 뉴스의 낚시성을 평가합니다.
특히 다음 요소를 중점적으로 검토하세요:
- 연예인 사생활 침해 수준의 자극적 표현
- 루머나 추측에 기반한 선정적 제목
- 연예인 간 갈등 조장 표현
"""
}
```

## 🎯 프롬프트 최적화

### 토큰 효율성
```python
import re

def optimize_prompt_tokens(title, content):
    """프롬프트 토큰 수 최적화"""
    # 내용 길이 제한 (500자)
    if len(content) > 500:
        content = content[:500] + "..."
    
    # 불필요한 HTML 태그 제거
    content = re.sub(r'<[^>]+>', '', content)
    
    # 중복 공백 제거
    content = re.sub(r'\s+', ' ', content).strip()
    
    return title, content
```

### 프롬프트 버전 관리
```python
PROMPT_VERSIONS = {
    "v1.0": CLICKBAIT_PROMPT,
    "v1.1": """개선된 프롬프트 내용...""",
    "v2.0": """대폭 개선된 프롬프트 내용..."""
}

CURRENT_PROMPT_VERSION = "v1.1"
```

## 📊 점수 해석 기준

### 점수 구간별 분류
```python
SCORE_CATEGORIES = {
    "낮음": {
        "range": (0, 30),
        "color": "#10B981",
        "description": "객관적이고 정보 전달 중심"
    },
    "보통": {
        "range": (31, 60),
        "color": "#F59E0B", 
        "description": "일부 자극적 요소 포함"
    },
    "높음": {
        "range": (61, 100),
        "color": "#EF4444",
        "description": "강한 낚시성 요소 포함"
    }
}
```

### 언론사별 점수 기준
```python
PUBLISHER_SCORE_ADJUSTMENTS = {
    "스포츠": {
        "base_adjustment": -5,  # 스포츠 뉴스는 기본적으로 자극적
        "keywords_penalty": ["이변", "파격"] 
    },
    "연예": {
        "base_adjustment": 0,
        "keywords_penalty": ["폭로", "스캔들"]
    }
}
```

## 🔧 설정 관리

### 환경별 설정
```python
import os

class Config:
    def __init__(self):
        self.env = os.getenv('ENV', 'development')
        self.load_config()
    
    def load_config(self):
        if self.env == 'production':
            self.batch_size = 1000
            self.max_tokens = 300
            self.temperature = 0.1
        else:
            self.batch_size = 100
            self.max_tokens = 500
            self.temperature = 0.0
```

### 키워드 업데이트 전략
```python
def update_keywords_based_on_performance():
    """성과 기반 키워드 업데이트"""
    # 낮은 점수를 받은 키워드 제거
    # 높은 점수를 받은 키워드 가중치 증가
    # 새로운 트렌드 키워드 추가
    pass
```

## 🧪 A/B 테스트

### 프롬프트 A/B 테스트
```python
import random

def ab_test_prompt(article_data):
    """프롬프트 A/B 테스트"""
    
    if random.random() < 0.5:
        return PROMPT_VERSIONS["v1.0"]
    else:
        return PROMPT_VERSIONS["v1.1"]
```

### 결과 분석
```python
def analyze_prompt_performance():
    """프롬프트 성능 분석"""
    # 버전별 점수 분포 분석
    # 응답 품질 평가
    # 토큰 사용량 비교
    pass
```

## 📈 품질 보증

### 프롬프트 검증
```python
def validate_prompt_response(response):
    """프롬프트 응답 검증"""
    # 점수 범위 검증 (0-100)
    # 응답 형식 검증
    # 근거 존재 여부 확인
    return is_valid, error_message
```

### 이상 점수 탐지
```python
def detect_anomalous_scores():
    """이상 점수 탐지"""
    # 평균에서 크게 벗어난 점수
    # 일관성 없는 점수 패턴
         # 특정 언론사 편향 점수
     pass
```
