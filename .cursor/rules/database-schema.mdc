
# Supabase 데이터베이스 스키마 설계

## 📊 테이블 구조

### 1. articles (기사) 테이블
```sql
CREATE TABLE articles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  journalist_id UUID NOT NULL,
  publisher TEXT NOT NULL,
  clickbait_score INTEGER NOT NULL CHECK (clickbait_score >= 0 AND clickbait_score <= 100),
  score_explanation TEXT,
  published_at TIMESTAMP WITH TIME ZONE NOT NULL,
  naver_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### 3. batch (OpenAI 배치 작업) 테이블
```sql
CREATE TABLE batch (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  batch_id TEXT NOT NULL UNIQUE,
  status TEXT NOT NULL CHECK (status IN ('in_progress', 'completed', 'failed', 'cancelled')),
  article_count INTEGER NOT NULL DEFAULT 0,
  error_message TEXT,
  input_file_id TEXT,
  output_file_id TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### 2. journalists (기자) 테이블  
```sql
CREATE TABLE journalists (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  naver_uuid TEXT,
  publisher TEXT NOT NULL,
  article_count INTEGER DEFAULT 0,
  average_score DECIMAL(5,2) DEFAULT 0.00,
  max_score INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## 🔍 인덱스 설정

### 성능 최적화를 위한 인덱스
```sql
-- 기사 테이블 인덱스
CREATE INDEX idx_articles_clickbait_score ON articles (clickbait_score DESC);
CREATE INDEX idx_articles_published_at ON articles (published_at DESC);
CREATE INDEX idx_articles_journalist_id ON articles (journalist_id);
CREATE INDEX idx_articles_title_gin ON articles USING GIN (to_tsvector('english', title));
CREATE INDEX idx_articles_publisher ON articles (publisher);

-- 기자 테이블 인덱스
CREATE INDEX idx_journalists_average_score ON journalists (average_score DESC);
CREATE INDEX idx_journalists_publisher ON journalists (publisher);
```

## 🔧 자동화 기능

### 기자 통계 자동 업데이트 트리거
```sql
CREATE OR REPLACE FUNCTION update_journalist_stats()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE journalists 
  SET 
    article_count = (
      SELECT COUNT(*) FROM articles WHERE journalist_id = NEW.journalist_id
    ),
    average_score = (
      SELECT AVG(clickbait_score) FROM articles WHERE journalist_id = NEW.journalist_id
    ),
    max_score = (
      SELECT MAX(clickbait_score) FROM articles WHERE journalist_id = NEW.journalist_id
    ),
    updated_at = NOW()
  WHERE id = NEW.journalist_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_journalist_stats
AFTER INSERT OR UPDATE ON articles
FOR EACH ROW
EXECUTE FUNCTION update_journalist_stats();
```

## 📈 성능 최적화 뷰

### 인기 기사 뷰 (낚시 점수 70점 이상)
```sql
CREATE VIEW popular_articles AS
SELECT 
  id,
  title,
  clickbait_score,
  published_at,
  naver_url,
  journalist_id,
  publisher
FROM articles
WHERE clickbait_score >= 70
ORDER BY clickbait_score DESC;
```

### 기자 랭킹 뷰
```sql
CREATE VIEW journalist_rankings AS
SELECT 
  j.id,
  j.name,
  j.publisher,
  j.article_count,
  j.average_score,
  j.max_score,
  j.created_at,
  j.updated_at
FROM journalists j
WHERE j.article_count > 0
ORDER BY j.average_score DESC;
```

## 🔒 보안 정책 (RLS)

### Row Level Security 설정
```sql
-- 기사 테이블 공개 읽기 권한
ALTER TABLE articles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Articles are viewable by everyone" ON articles
  FOR SELECT USING (true);

-- 기자 테이블 공개 읽기 권한  
ALTER TABLE journalists ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Journalists are viewable by everyone" ON journalists
  FOR SELECT USING (true);
```

## 📊 TypeScript 타입 정의

### 기본 타입
```typescript
export interface Article {
  id: string;
  title: string;
  content: string;
  journalist_id: string;
  publisher: string;
  clickbait_score: number;
  score_explanation?: string;
  published_at: string;
  naver_url?: string;
  created_at: string;
  updated_at: string;
}

export interface Journalist {
  id: string;
  name: string;
  naver_uuid?: string;
  publisher: string;
  article_count: number;
  average_score: number;
  max_score: number;
  created_at: string;
  updated_at: string;
}
```

### 확장 타입 (조인 포함)
```typescript
export interface ArticleWithJournalist extends Article {
  journalist: {
    name: string;
    publisher: string;
  };
}

export interface JournalistRanking {
  id: string;
  name: string;
  publisher: string;
  article_count: number;
  average_score: number;
  max_score: number;
  created_at: string;
  updated_at: string;
}
```

## 🔍 주요 쿼리 패턴

### 1. 기사 목록 조회 (페이지네이션)
```sql
SELECT 
  a.id,
  a.title,
  a.clickbait_score,
  a.published_at,
  a.naver_url,
  j.name as journalist_name,
  a.publisher
FROM articles a
JOIN journalists j ON a.journalist_id = j.id
ORDER BY a.published_at DESC
LIMIT 20 OFFSET 0;
```

### 2. 기자별 기사 조회
```sql
SELECT 
  a.id,
  a.title,
  a.clickbait_score,
  a.published_at,
  a.naver_url,
  a.publisher
FROM articles a
WHERE a.journalist_id = $1
ORDER BY a.published_at DESC;
```

### 3. 신문사별 기사 조회
```sql
SELECT 
  a.id,
  a.title,
  a.clickbait_score,
  a.published_at,
  a.naver_url,
  j.name as journalist_name
FROM articles a
JOIN journalists j ON a.journalist_id = j.id
WHERE a.publisher = $1
ORDER BY a.published_at DESC;
```

### 4. 인기 기사 조회 (낚시 점수 높은 순)
```sql
SELECT * FROM popular_articles
LIMIT 10;
```

### 5. 기자 랭킹 조회
```sql
SELECT * FROM journalist_rankings
LIMIT 20;
```

### 6. 신문사별 기자 랭킹
```sql
SELECT * FROM journalist_rankings
WHERE publisher = $1
LIMIT 10;
```

## 📦 Supabase 클라이언트 설정

### 환경 변수
```env
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
```

### 클라이언트 초기화
```typescript
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

## 🎯 낚시 점수 시스템

### 점수 범위 및 색상
- **0-30점**: 낮음 (Green) `#10B981`
- **31-60점**: 보통 (Yellow) `#F59E0B`  
- **61-100점**: 높음 (Red) `#EF4444`

### 점수 색상 유틸리티 함수
```typescript
export function getScoreColor(score: number): string {
  if (score <= 30) return '#10B981'; // green
  if (score <= 60) return '#F59E0B'; // yellow
  return '#EF4444'; // red
}

export function getScoreTextColor(score: number): string {
  if (score <= 30) return 'text-green-600';
  if (score <= 60) return 'text-yellow-600';
  return 'text-red-600';
}

export function getScoreBgColor(score: number): string {
  if (score <= 30) return 'bg-green-100';
  if (score <= 60) return 'bg-yellow-100';
  return 'bg-red-100';
}
```

## 📰 신문사 목록

### 현재 등록된 신문사들
- **조선일보** - 대표적인 보수 일간지
- **중앙일보** - 종합 일간지
- **동아일보** - 대표적인 보수 일간지
- **한국일보** - 종합 일간지
- **문화일보** - 문화 중심 일간지
- **세계일보** - 종합 일간지
- **국민일보** - 종합 일간지
- **서울신문** - 수도권 일간지
- **한겨레** - 진보 성향 일간지
- **경향신문** - 진보 성향 일간지

### 신문사별 통계 조회
```sql
SELECT 
  publisher,
  COUNT(*) as total_articles,
  AVG(clickbait_score) as avg_clickbait_score,
  MAX(clickbait_score) as max_clickbait_score
FROM articles 
GROUP BY publisher
ORDER BY avg_clickbait_score DESC;
```

  return query;
}
```

  return query;
}
```
