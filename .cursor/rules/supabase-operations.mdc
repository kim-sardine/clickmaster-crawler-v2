---
globs: "src/database/*"
description: "Supabase 데이터베이스 연산 가이드"
---

# Supabase 데이터베이스 연산

## 🗄️ 데이터베이스 연결

### 클라이언트 초기화
```python
from supabase import create_client, Client
import os

url = os.environ.get("SUPABASE_URL")
key = os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
supabase: Client = create_client(url, key)
```

### 환경 변수 관리
- `SUPABASE_URL`: Supabase 프로젝트 URL
- `SUPABASE_SERVICE_ROLE_KEY`: 서비스 롤 키 (읽기/쓰기 권한)
- `SUPABASE_SERVICE_ROLE_KEY`: 관리자 권한 키

## 📝 기본 CRUD 연산

### 기사 데이터 삽입
```python
def insert_article(article_data):
    """기사 데이터 삽입"""
    return supabase.table('articles').insert(article_data).execute()
```

### 기자 정보 조회/삽입
```python
def get_or_create_journalist(name, publisher, naver_uuid=None):
    """기자 정보 조회 또는 생성"""
    # 기존 기자 조회
    existing = supabase.table('journalists').select('*').eq('name', name).eq('publisher', publisher).execute()
    
    if existing.data:
        return existing.data[0]
    
    # 새 기자 생성
    new_journalist = {
        'name': name,
        'publisher': publisher,
        'naver_uuid': naver_uuid
    }
    return supabase.table('journalists').insert(new_journalist).execute()
```

## 🔍 쿼리 패턴

### 배치 삽입
```python
def bulk_insert_articles(articles_list):
    """배치 기사 삽입"""
    batch_size = 100
    for i in range(0, len(articles_list), batch_size):
        batch = articles_list[i:i + batch_size]
        result = supabase.table('articles').insert(batch).execute()
        if not result.data:
            # 에러 처리
            handle_insert_error(batch)
```

### 중복 체크
```python
def check_duplicate_article(naver_url):
    """중복 기사 체크"""
    result = supabase.table('articles').select('id').eq('naver_url', naver_url).execute()
    return len(result.data) > 0
```

### 미처리 기사 조회
```python
def get_unprocessed_articles(limit=1000):
    """OpenAI 처리되지 않은 기사 조회"""
    return supabase.table('articles').select('*').is_('clickbait_score', 'null').limit(limit).execute()
```

## 🔄 배치 상태 관리

### 배치 상태 업데이트
```python
def update_batch_status(batch_id, status, **kwargs):
    """배치 상태 업데이트"""
    update_data = {
        'status': status,
        'updated_at': 'now()'
    }
    update_data.update(kwargs)
    
    return supabase.table('batch_status').update(update_data).eq('batch_id', batch_id).execute()
```

### 진행중인 배치 조회
```python
def get_active_batches():
    """진행중인 배치 조회"""
    return supabase.table('batch_status').select('*').in_('status', ['validating', 'in_progress', 'finalizing']).execute()
```

## 📊 통계 및 집계

### 언론사별 통계
```python
def get_publisher_stats():
    """언론사별 기사 통계"""
    return supabase.rpc('get_publisher_statistics').execute()
```

### 기자별 점수 업데이트
```python
def update_journalist_scores(journalist_id):
    """기자별 평균 점수 업데이트"""
    return supabase.rpc('update_journalist_stats', {'journalist_id': journalist_id}).execute()
```

## 🛠️ 에러 핸들링

### 연결 재시도
```python
import time
from functools import wraps

def retry_db_operation(max_retries=3, delay=1):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_retries - 1:
                        raise
                    time.sleep(delay * (2 ** attempt))
            return None
        return wrapper
    return decorator
```

### 중복 키 에러 처리
```python
def handle_duplicate_key_error(data):
    """중복 키 에러 처리"""
    # 기존 레코드 업데이트 시도
    if 'naver_url' in data:
        return supabase.table('articles').update(data).eq('naver_url', data['naver_url']).execute()
```

## 🔒 보안 및 권한

### RLS (Row Level Security) 정책
- 읽기 권한: 모든 사용자
- 쓰기 권한: 서비스 롤만

### 민감한 데이터 처리
- 기자 개인정보 마스킹
- 로그에서 민감 데이터 제외
- API 키 환경변수 관리

## 📈 성능 최적화

### 인덱스 활용
- `articles.naver_url` 인덱스 활용
- `articles.published_at` 시간 기반 쿼리
- `journalists.name + publisher` 복합 인덱스

### 배치 처리 최적화
- 트랜잭션 단위 최적화
- 연결 풀 사용
- 쿼리 캐싱 전략

### 메모리 효율성
- 대량 데이터 스트리밍 처리
- 메모리 사용량 모니터링
- 가비지 컬렉션 최적화
