---
description: Supabase Operations
alwaysApply: false
---

# Supabase 데이터베이스 연산

## 🗄️ 데이터베이스 연결 ✅ 구현완료

### 클라이언트 초기화 (`src/database/supabase_client.py`)
```python
from src.database.supabase_client import get_supabase_client

# 싱글톤 패턴으로 구현됨
client = get_supabase_client()
supabase = client.client  # Supabase Client 인스턴스
```

### 환경 변수 관리 ✅ 구현완료
- `SUPABASE_URL`: Supabase 프로젝트 URL
- `SUPABASE_SERVICE_ROLE_KEY`: 서비스 롤 키 (읽기/쓰기 권한)
- 환경변수 검증 로직 포함 (`src/config/settings.py`)

## 📝 기본 CRUD 연산 ✅ 구현완료

### 기사 데이터 삽입 (`src/database/operations.py`)
```python
class DatabaseOperations:
    def insert_article(self, article: Article) -> Dict[str, Any]:
        """기사 데이터 삽입"""
        # 기자 정보 자동 조회/생성
        journalist = self.get_or_create_journalist(article.journalist_name, article.publisher)
        article.journalist_id = journalist["id"]
        
        # 기사 삽입
        result = self.client.client.table('articles').insert(article.to_dict()).execute()
        return result.data[0]
```

### 기자 정보 조회/삽입 ✅ 구현완료
```python
def get_or_create_journalist(self, name: str, publisher: str, naver_uuid: Optional[str] = None):
    """기자 정보 조회 또는 생성"""
    # 익명 기자 처리 로직 포함
    if name in ["익명", "기자", "", " "]:
        name = f"익명기자_{publisher}"
    
    # 기존 기자 조회
    existing = self.client.client.table('journalists').select('*').eq('name', name).eq('publisher', publisher).execute()
    
    if existing.data:
        return existing.data[0]
    
    # 새 기자 생성
    journalist = Journalist(name=name, publisher=publisher, naver_uuid=naver_uuid)
    return self.client.client.table('journalists').insert(journalist.to_dict()).execute().data[0]
```

## 🔍 쿼리 패턴 ✅ 구현완료

### 배치 삽입 (성능 최적화)
```python
def bulk_insert_articles(self, articles: List[Article]) -> List[Dict[str, Any]]:
    """기사 배치 삽입 (기자 정보 캐싱으로 성능 최적화)"""
    journalist_cache = {}  # 기자 정보 캐싱
    inserted_articles = []
    
    for article in articles:
        # 캐시에서 기자 정보 조회
        journalist_key = f"{article.journalist_name}_{article.publisher}"
        if journalist_key not in journalist_cache:
            journalist = self.get_or_create_journalist(article.journalist_name, article.publisher)
            journalist_cache[journalist_key] = journalist
        
        # 기사 삽입
        article.journalist_id = journalist_cache[journalist_key]["id"]
        result = self.client.client.table('articles').insert(article.to_dict()).execute()
        if result.data:
            inserted_articles.append(result.data[0])
    
    return inserted_articles
```

### 중복 체크 ✅ 구현완료
```python
def check_duplicate_article(self, naver_url: str) -> bool:
    """중복 기사 체크"""
    result = self.client.client.table('articles').select('id').eq('naver_url', naver_url).execute()
    return len(result.data) > 0
```

### 미처리 기사 조회 ✅ 구현완료
```python
def get_unprocessed_articles(self, limit: int = 1000) -> List[Dict[str, Any]]:
    """OpenAI 처리되지 않은 기사 조회"""
    return self.client.client.table('articles').select('*').is_('clickbait_score', 'null').limit(limit).execute().data
```

## 📊 통계 및 집계 ✅ 구현완료

### 기자 통계 관리 (`scripts/sync_journalist_stats.py`)
```python
def update_journalist_stats_manual(self, journalist_id: str) -> bool:
    """특정 기자의 통계 수동 업데이트"""
    # 해당 기자의 모든 기사 통계 계산
    # article_count, avg_clickbait_score, max_score 업데이트

def update_all_journalist_stats(self) -> Dict[str, Any]:
    """모든 기자 통계 업데이트"""
    # 모든 기자에 대해 통계 재계산 및 업데이트

def get_journalist_stats_summary(self) -> Dict[str, Any]:
    """기자 통계 요약 조회"""
    # 전체 기자 수, 활성 기자 수, 점수 있는 기자 수 등 반환

def fix_inconsistent_stats(self) -> Dict[str, Any]:
    """통계 불일치 감지 및 수정"""
    # 기사 수와 실제 통계 간 불일치 감지 및 수정
```

## 🔄 배치 상태 관리 ❌ 미구현

### 배치 상태 테이블 (향후 구현 예정)
```sql
CREATE TABLE batch_status (
  id UUID PRIMARY KEY,
  batch_id TEXT UNIQUE NOT NULL,
  status TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  input_file_id TEXT,
  output_file_id TEXT,
  error_file_id TEXT,
  request_count INTEGER DEFAULT 0,
  completed_count INTEGER DEFAULT 0,
  failed_count INTEGER DEFAULT 0
);
```

## 🛠️ 에러 핸들링 ✅ 부분 구현

### 연결 테스트 ✅ 구현완료
```python
# src/database/supabase_client.py
def test_connection(self) -> bool:
    """연결 테스트"""
    try:
        result = self.client.table("articles").select("id").limit(1).execute()
        return True
    except Exception:
        return False
```

### 재시도 메커니즘 ❌ 미구현 (향후 추가 예정)
```python
# 향후 구현 예정
import time
from functools import wraps

def retry_db_operation(max_retries=3, delay=1):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_retries - 1:
                        raise
                    time.sleep(delay * (2 ** attempt))
        return wrapper
    return decorator
```

## 📈 성능 최적화 ✅ 구현완료

### 캐싱 전략
- 기자 정보 메모리 캐싱 (`journalist_cache`)
- 배치 삽입으로 DB 호출 최소화
- 싱글톤 패턴으로 클라이언트 재사용

### 메모리 효율성
- 배치 처리 시 스트리밍 방식
- 처리 완료 후 즉시 메모리 해제
- 상세한 로깅으로 성능 모니터링

## 🔒 보안 및 권한 ✅ 구현완료

### 환경변수 관리
- `.env` 파일을 통한 안전한 키 관리
- 환경변수 검증 로직 (`settings.validate()`)
- 서비스 롤 키 사용으로 모든 권한 보장

### 데이터 검증
- Article 모델에서 자동 데이터 검증
- URL 형식 검증
- 점수 범위 검증 (0-100)

## 🚀 실행 예시

### 기본 사용법
```python
from src.database.operations import DatabaseOperations

db_ops = DatabaseOperations()

# 기사 삽입
article = Article(title="제목", content="내용", ...)
result = db_ops.insert_article(article)

# 배치 삽입
articles = [article1, article2, ...]
results = db_ops.bulk_insert_articles(articles)

# 중복 체크
is_duplicate = db_ops.check_duplicate_article("https://n.news.naver.com/...")
```

### 통계 동기화
```bash
# 기자 통계 동기화 스크립트 실행
python scripts/sync_journalist_stats.py

# 통계 불일치 수정
python scripts/sync_journalist_stats.py --fix-inconsistencies

# 전체 통계 강제 업데이트
python scripts/sync_journalist_stats.py --full-update
```

## 📊 현재 데이터베이스 스키마

### articles 테이블 (구현완료)
- id: UUID (Primary Key)
- title: TEXT
- content: TEXT
- journalist_id: UUID (Foreign Key)
- journalist_name: TEXT
- publisher: TEXT
- published_at: TIMESTAMP
- naver_url: TEXT
- clickbait_score: INTEGER (0-100)
- clickbait_explanation: TEXT
- created_at: TIMESTAMP
- updated_at: TIMESTAMP

### journalists 테이블 (구현완료)
- id: UUID (Primary Key)
- name: TEXT
- naver_uuid: TEXT
- publisher: TEXT
- article_count: INTEGER
- avg_clickbait_score: DECIMAL
- max_score: INTEGER
- created_at: TIMESTAMP
- updated_at: TIMESTAMP

## 🔮 향후 개선 계획

### 고급 쿼리 기능
- 전문검색 인덱스 활용
- 복합 조건 검색 최적화
- 실시간 통계 뷰 구현

### 성능 모니터링
- 쿼리 실행 시간 추적
- 메모리 사용량 모니터링
- DB 연결 풀링 구현

- 대량 데이터 스트리밍 처리
- 메모리 사용량 모니터링
- 가비지 컬렉션 최적화
