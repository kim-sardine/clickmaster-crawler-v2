---
globs: ".github/workflows/*"
description: "GitHub Actions 워크플로우 자동화 가이드"
---

# GitHub Actions 워크플로우 자동화

## 🚀 워크플로우 개요

### 자동화 파이프라인
1. **매일 뉴스 크롤링** - 오전 9시 자동 실행
2. **배치 처리 모니터링** - 10분마다 상태 확인
3. **완료된 배치 처리** - 30분마다 결과 처리
4. **데이터 백업** - 매일 자정 백업

### 워크플로우 구조
```
.github/workflows/
├── daily-crawler.yml          # 매일 뉴스 크롤링
├── batch-processor.yml        # 배치 처리 모니터링
├── data-backup.yml           # 데이터 백업
└── manual-trigger.yml        # 수동 실행 워크플로우
```

## 📅 스케줄링 워크플로우

### 매일 뉴스 크롤링
```yaml
name: Daily News Crawling
on:
  schedule:
    - cron: '0 9 * * *'  # 매일 오전 9시 (UTC)
  workflow_dispatch:     # 수동 실행 가능

jobs:
  crawl-naver-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Crawl Naver API
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        run: |
          python scripts/crawl_news.py --date $(date +%Y-%m-%d) --source api
          
      - name: Crawl Naver Entertainment
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          python scripts/crawl_news.py --date $(date +%Y-%m-%d) --source entertain
          
      - name: Notify Results
        if: always()
        run: |
          echo "크롤링 완료: $(date)"
```

### 배치 처리 모니터링
```yaml
name: Batch Processing Monitor
on:
  schedule:
    - cron: '*/10 * * * *'  # 10분마다 실행
  workflow_dispatch:

jobs:
  monitor-batches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Monitor Active Batches
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/monitor_batches.py --check-all
          
      - name: Process Completed Batches
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/process_completed_batches.py --auto-process
```

## 🔧 수동 실행 워크플로우

### 수동 트리거
```yaml
name: Manual Operations
on:
  workflow_dispatch:
    inputs:
      operation:
        description: '실행할 작업 선택'
        required: true
        default: 'crawl'
        type: choice
        options:
          - crawl
          - batch-create
          - batch-monitor
          - batch-process
          - data-backup
          
      date:
        description: '처리 날짜 (YYYY-MM-DD)'
        required: false
        type: string
        
      source:
        description: '크롤링 소스 (api/entertain)'
        required: false
        default: 'api'
        type: choice
        options:
          - api
          - entertain

jobs:
  manual-operation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Execute Selected Operation
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        run: |
          case "${{ github.event.inputs.operation }}" in
            crawl)
              python scripts/crawl_news.py --date "${{ github.event.inputs.date }}" --source "${{ github.event.inputs.source }}"
              ;;
            batch-create)
              python scripts/process_openai_batch.py --create-batch
              ;;
            batch-monitor)
              python scripts/monitor_batches.py --check-all
              ;;
            batch-process)
              python scripts/process_completed_batches.py --auto-process
              ;;
            data-backup)
              python scripts/backup_data.py --date "${{ github.event.inputs.date }}"
              ;;
          esac
```

## 🔒 보안 및 Secrets 관리

### 필수 Secrets
```yaml
secrets:
  SUPABASE_URL: "https://your-project.supabase.co"
  SUPABASE_SERVICE_ROLE_KEY: "your-supabase-service-role-key"
  OPENAI_API_KEY: "sk-your-openai-api-key"
  NAVER_CLIENT_ID: "your-naver-client-id"
  NAVER_CLIENT_SECRET: "your-naver-client-secret"
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/..."  # 선택사항
```

### 환경 변수 검증
```yaml
- name: Validate Environment
  run: |
    if [ -z "$SUPABASE_URL" ]; then
      echo "SUPABASE_URL이 설정되지 않았습니다."
      exit 1
    fi
    if [ -z "$OPENAI_API_KEY" ]; then
      echo "OPENAI_API_KEY가 설정되지 않았습니다."
      exit 1
    fi
```

## 📊 모니터링 및 알림

### 실행 결과 알림
```yaml
- name: Slack Notification
  if: always()
  uses: 8398a7/action-slack@v3
  with:
    status: ${{ job.status }}
    channel: '#news-crawler'
    webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    fields: repo,message,commit,author,action,eventName,ref,workflow
```

### 에러 핸들링
```yaml
- name: Handle Errors
  if: failure()
  run: |
    echo "워크플로우 실행 중 오류가 발생했습니다."
    echo "로그를 확인하여 문제를 해결하세요."
    # 에러 로그 수집 및 전송
```

## 🚀 배포 및 릴리스

### 태그 기반 배포
```yaml
name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
```

## 🔄 워크플로우 최적화

### 캐싱 전략
```yaml
- name: Cache Dependencies
  uses: actions/cache@v3
  with:
    path: ~/.cache/pip
    key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    restore-keys: |
      ${{ runner.os }}-pip-
```

### 병렬 처리
```yaml
strategy:
  matrix:
    source: [api, entertain]
    
steps:
  - name: Crawl News (${{ matrix.source }})
    run: |
      python scripts/crawl_news.py --source ${{ matrix.source }}
```

## 📈 성능 모니터링

### 실행 시간 추적
```yaml
- name: Track Execution Time
  run: |
    start_time=$(date +%s)
    python scripts/crawl_news.py --date $(date +%Y-%m-%d)
    end_time=$(date +%s)
    echo "실행 시간: $((end_time - start_time))초"
```

### 리소스 사용량 모니터링
```yaml
- name: Monitor Resources
  run: |
    echo "메모리 사용량:"
    free -h
    echo "디스크 사용량:"
         df -h
```
