name: Batch Processor

on:
  schedule:
    # 매시간 실행 (시간 단위로 분산하여 부하 감소)
    - cron: '15 * * * *'  # 매시간 15분에 배치 모니터링
    - cron: '45 * * * *'  # 매시간 45분에 결과 처리
  workflow_dispatch:  # 수동 실행 가능
    inputs:
      task:
        description: 'Task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - monitor
        - process
        - naksi-king

jobs:
  batch-monitor:
    if: github.event.schedule == '15 * * * *' || github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'all' || github.event.inputs.task == 'monitor')
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 30분 타임아웃
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Monitor batches and create new ones
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "🔍 Starting batch monitoring..."
        python scripts/monitor_batches.py

  batch-processor:
    if: github.event.schedule == '45 * * * *' || github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'all' || github.event.inputs.task == 'process')
    runs-on: ubuntu-latest
    timeout-minutes: 45  # 45분 타임아웃
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Process completed batches
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "⚙️ Processing completed batches..."
        python scripts/process_completed_batches.py

  naksi-king-analysis:
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'all' || github.event.inputs.task == 'naksi-king')
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 15분 타임아웃
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Naksi King analysis
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "👑 Running Naksi King analysis..."
        python scripts/process_naksi_king.py
        
    - name: Upload analysis report
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: naksi-king-report-${{ github.run_number }}
        path: |
          reports/
          *.txt
        retention-days: 30

  upload-logs:
    if: failure()
    runs-on: ubuntu-latest
    needs: [batch-monitor, batch-processor, naksi-king-analysis]
    
    steps:
    - name: Upload logs on failure
      uses: actions/upload-artifact@v3
      with:
        name: batch-processor-logs-${{ github.run_number }}
        path: |
          *.log
          logs/
        retention-days: 7 